// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accountWithToken(): Array<string> {
    let value = this.get("accountWithToken");
    return value.toStringArray();
  }

  set accountWithToken(value: Array<string>) {
    this.set("accountWithToken", Value.fromStringArray(value));
  }

  get flowsOwned(): Array<string> {
    let value = this.get("flowsOwned");
    return value.toStringArray();
  }

  set flowsOwned(value: Array<string>) {
    this.set("flowsOwned", Value.fromStringArray(value));
  }

  get flowsReceived(): Array<string> {
    let value = this.get("flowsReceived");
    return value.toStringArray();
  }

  set flowsReceived(value: Array<string>) {
    this.set("flowsReceived", Value.fromStringArray(value));
  }

  get upgradeEvents(): Array<string> {
    let value = this.get("upgradeEvents");
    return value.toStringArray();
  }

  set upgradeEvents(value: Array<string>) {
    this.set("upgradeEvents", Value.fromStringArray(value));
  }

  get downgradeEvents(): Array<string> {
    let value = this.get("downgradeEvents");
    return value.toStringArray();
  }

  set downgradeEvents(value: Array<string>) {
    this.set("downgradeEvents", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get underlyingAddress(): Bytes {
    let value = this.get("underlyingAddress");
    return value.toBytes();
  }

  set underlyingAddress(value: Bytes) {
    this.set("underlyingAddress", Value.fromBytes(value));
  }

  get accountWithToken(): Array<string> {
    let value = this.get("accountWithToken");
    return value.toStringArray();
  }

  set accountWithToken(value: Array<string>) {
    this.set("accountWithToken", Value.fromStringArray(value));
  }

  get flows(): Array<string> {
    let value = this.get("flows");
    return value.toStringArray();
  }

  set flows(value: Array<string>) {
    this.set("flows", Value.fromStringArray(value));
  }

  get upgradeEvents(): Array<string> {
    let value = this.get("upgradeEvents");
    return value.toStringArray();
  }

  set upgradeEvents(value: Array<string>) {
    this.set("upgradeEvents", Value.fromStringArray(value));
  }

  get downgradeEvents(): Array<string> {
    let value = this.get("downgradeEvents");
    return value.toStringArray();
  }

  set downgradeEvents(value: Array<string>) {
    this.set("downgradeEvents", Value.fromStringArray(value));
  }
}

export class AccountWithToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AccountWithToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AccountWithToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AccountWithToken", id.toString(), this);
  }

  static load(id: string): AccountWithToken | null {
    return store.get("AccountWithToken", id) as AccountWithToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get transferEventsReceived(): Array<string> {
    let value = this.get("transferEventsReceived");
    return value.toStringArray();
  }

  set transferEventsReceived(value: Array<string>) {
    this.set("transferEventsReceived", Value.fromStringArray(value));
  }

  get transferEventsSent(): Array<string> {
    let value = this.get("transferEventsSent");
    return value.toStringArray();
  }

  set transferEventsSent(value: Array<string>) {
    this.set("transferEventsSent", Value.fromStringArray(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}

export class Flow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Flow entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Flow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Flow", id.toString(), this);
  }

  static load(id: string): Flow | null {
    return store.get("Flow", id) as Flow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sum(): BigDecimal {
    let value = this.get("sum");
    return value.toBigDecimal();
  }

  set sum(value: BigDecimal) {
    this.set("sum", Value.fromBigDecimal(value));
  }

  get flowRate(): BigInt {
    let value = this.get("flowRate");
    return value.toBigInt();
  }

  set flowRate(value: BigInt) {
    this.set("flowRate", Value.fromBigInt(value));
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    return value.toBigInt();
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class Subscriber extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Subscriber entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Subscriber entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Subscriber", id.toString(), this);
  }

  static load(id: string): Subscriber | null {
    return store.get("Subscriber", id) as Subscriber | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(value as Bytes));
    }
  }

  get subscriber(): Bytes | null {
    let value = this.get("subscriber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subscriber(value: Bytes | null) {
    if (value === null) {
      this.unset("subscriber");
    } else {
      this.set("subscriber", Value.fromBytes(value as Bytes));
    }
  }

  get publisher(): Bytes | null {
    let value = this.get("publisher");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set publisher(value: Bytes | null) {
    if (value === null) {
      this.unset("publisher");
    } else {
      this.set("publisher", Value.fromBytes(value as Bytes));
    }
  }

  get indexId(): BigInt | null {
    let value = this.get("indexId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set indexId(value: BigInt | null) {
    if (value === null) {
      this.unset("indexId");
    } else {
      this.set("indexId", Value.fromBigInt(value as BigInt));
    }
  }

  get userData(): Bytes | null {
    let value = this.get("userData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userData(value: Bytes | null) {
    if (value === null) {
      this.unset("userData");
    } else {
      this.set("userData", Value.fromBytes(value as Bytes));
    }
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }

  get units(): BigInt | null {
    let value = this.get("units");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set units(value: BigInt | null) {
    if (value === null) {
      this.unset("units");
    } else {
      this.set("units", Value.fromBigInt(value as BigInt));
    }
  }

  get totalReceived(): BigInt | null {
    let value = this.get("totalReceived");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalReceived(value: BigInt | null) {
    if (value === null) {
      this.unset("totalReceived");
    } else {
      this.set("totalReceived", Value.fromBigInt(value as BigInt));
    }
  }

  get totalPendingApproval(): BigInt | null {
    let value = this.get("totalPendingApproval");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalPendingApproval(value: BigInt | null) {
    if (value === null) {
      this.unset("totalPendingApproval");
    } else {
      this.set("totalPendingApproval", Value.fromBigInt(value as BigInt));
    }
  }

  get index(): string | null {
    let value = this.get("index");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set index(value: string | null) {
    if (value === null) {
      this.unset("index");
    } else {
      this.set("index", Value.fromString(value as string));
    }
  }

  get subscriptionApproved(): Array<string> {
    let value = this.get("subscriptionApproved");
    return value.toStringArray();
  }

  set subscriptionApproved(value: Array<string>) {
    this.set("subscriptionApproved", Value.fromStringArray(value));
  }

  get subscriptionRevoked(): Array<string> {
    let value = this.get("subscriptionRevoked");
    return value.toStringArray();
  }

  set subscriptionRevoked(value: Array<string>) {
    this.set("subscriptionRevoked", Value.fromStringArray(value));
  }

  get subscriptionUnitsUpdated(): Array<string> {
    let value = this.get("subscriptionUnitsUpdated");
    return value.toStringArray();
  }

  set subscriptionUnitsUpdated(value: Array<string>) {
    this.set("subscriptionUnitsUpdated", Value.fromStringArray(value));
  }
}

export class Index extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Index entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Index entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Index", id.toString(), this);
  }

  static load(id: string): Index | null {
    return store.get("Index", id) as Index | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(value as Bytes));
    }
  }

  get publisher(): Bytes | null {
    let value = this.get("publisher");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set publisher(value: Bytes | null) {
    if (value === null) {
      this.unset("publisher");
    } else {
      this.set("publisher", Value.fromBytes(value as Bytes));
    }
  }

  get indexId(): BigInt | null {
    let value = this.get("indexId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set indexId(value: BigInt | null) {
    if (value === null) {
      this.unset("indexId");
    } else {
      this.set("indexId", Value.fromBigInt(value as BigInt));
    }
  }

  get userData(): Bytes | null {
    let value = this.get("userData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userData(value: Bytes | null) {
    if (value === null) {
      this.unset("userData");
    } else {
      this.set("userData", Value.fromBytes(value as Bytes));
    }
  }

  get oldIndexValue(): BigInt | null {
    let value = this.get("oldIndexValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set oldIndexValue(value: BigInt | null) {
    if (value === null) {
      this.unset("oldIndexValue");
    } else {
      this.set("oldIndexValue", Value.fromBigInt(value as BigInt));
    }
  }

  get newIndexValue(): BigInt | null {
    let value = this.get("newIndexValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set newIndexValue(value: BigInt | null) {
    if (value === null) {
      this.unset("newIndexValue");
    } else {
      this.set("newIndexValue", Value.fromBigInt(value as BigInt));
    }
  }

  get totalUnitsPending(): BigInt | null {
    let value = this.get("totalUnitsPending");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalUnitsPending(value: BigInt | null) {
    if (value === null) {
      this.unset("totalUnitsPending");
    } else {
      this.set("totalUnitsPending", Value.fromBigInt(value as BigInt));
    }
  }

  get totalUnitsApproved(): BigInt | null {
    let value = this.get("totalUnitsApproved");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalUnitsApproved(value: BigInt | null) {
    if (value === null) {
      this.unset("totalUnitsApproved");
    } else {
      this.set("totalUnitsApproved", Value.fromBigInt(value as BigInt));
    }
  }

  get totalUnits(): BigInt | null {
    let value = this.get("totalUnits");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalUnits(value: BigInt | null) {
    if (value === null) {
      this.unset("totalUnits");
    } else {
      this.set("totalUnits", Value.fromBigInt(value as BigInt));
    }
  }

  get totalDistribution(): BigInt | null {
    let value = this.get("totalDistribution");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalDistribution(value: BigInt | null) {
    if (value === null) {
      this.unset("totalDistribution");
    } else {
      this.set("totalDistribution", Value.fromBigInt(value as BigInt));
    }
  }

  get subscribers(): Array<string> {
    let value = this.get("subscribers");
    return value.toStringArray();
  }

  set subscribers(value: Array<string>) {
    this.set("subscribers", Value.fromStringArray(value));
  }

  get indexUpdate(): Array<string> {
    let value = this.get("indexUpdate");
    return value.toStringArray();
  }

  set indexUpdate(value: Array<string>) {
    this.set("indexUpdate", Value.fromStringArray(value));
  }

  get indexUnitUpdate(): Array<string> {
    let value = this.get("indexUnitUpdate");
    return value.toStringArray();
  }

  set indexUnitUpdate(value: Array<string>) {
    this.set("indexUnitUpdate", Value.fromStringArray(value));
  }

  get indexSubscribed(): Array<string> {
    let value = this.get("indexSubscribed");
    return value.toStringArray();
  }

  set indexSubscribed(value: Array<string>) {
    this.set("indexSubscribed", Value.fromStringArray(value));
  }

  get indexUnsubscribed(): Array<string> {
    let value = this.get("indexUnsubscribed");
    return value.toStringArray();
  }

  set indexUnsubscribed(value: Array<string>) {
    this.set("indexUnsubscribed", Value.fromStringArray(value));
  }
}

export class FlowUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FlowUpdated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FlowUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FlowUpdated", id.toString(), this);
  }

  static load(id: string): FlowUpdated | null {
    return store.get("FlowUpdated", id) as FlowUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get flow(): string {
    let value = this.get("flow");
    return value.toString();
  }

  set flow(value: string) {
    this.set("flow", Value.fromString(value));
  }

  get oldFlowRate(): BigInt {
    let value = this.get("oldFlowRate");
    return value.toBigInt();
  }

  set oldFlowRate(value: BigInt) {
    this.set("oldFlowRate", Value.fromBigInt(value));
  }

  get flowRate(): BigInt {
    let value = this.get("flowRate");
    return value.toBigInt();
  }

  set flowRate(value: BigInt) {
    this.set("flowRate", Value.fromBigInt(value));
  }

  get sum(): BigDecimal {
    let value = this.get("sum");
    return value.toBigDecimal();
  }

  set sum(value: BigDecimal) {
    this.set("sum", Value.fromBigDecimal(value));
  }
}

export class SuperTokenCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SuperTokenCreated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SuperTokenCreated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SuperTokenCreated", id.toString(), this);
  }

  static load(id: string): SuperTokenCreated | null {
    return store.get("SuperTokenCreated", id) as SuperTokenCreated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get underlyingAddress(): Bytes {
    let value = this.get("underlyingAddress");
    return value.toBytes();
  }

  set underlyingAddress(value: Bytes) {
    this.set("underlyingAddress", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }
}

export class TokenUpgraded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenUpgraded entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenUpgraded entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenUpgraded", id.toString(), this);
  }

  static load(id: string): TokenUpgraded | null {
    return store.get("TokenUpgraded", id) as TokenUpgraded | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class TokenDowngraded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenDowngraded entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenDowngraded entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenDowngraded", id.toString(), this);
  }

  static load(id: string): TokenDowngraded | null {
    return store.get("TokenDowngraded", id) as TokenDowngraded | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class TokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenTransfer", id.toString(), this);
  }

  static load(id: string): TokenTransfer | null {
    return store.get("TokenTransfer", id) as TokenTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}

export class indexUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save indexUpdate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save indexUpdate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("indexUpdate", id.toString(), this);
  }

  static load(id: string): indexUpdate | null {
    return store.get("indexUpdate", id) as indexUpdate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): string | null {
    let value = this.get("index");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set index(value: string | null) {
    if (value === null) {
      this.unset("index");
    } else {
      this.set("index", Value.fromString(value as string));
    }
  }

  get newIndexValue(): BigInt | null {
    let value = this.get("newIndexValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set newIndexValue(value: BigInt | null) {
    if (value === null) {
      this.unset("newIndexValue");
    } else {
      this.set("newIndexValue", Value.fromBigInt(value as BigInt));
    }
  }

  get oldIndexValue(): BigInt | null {
    let value = this.get("oldIndexValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set oldIndexValue(value: BigInt | null) {
    if (value === null) {
      this.unset("oldIndexValue");
    } else {
      this.set("oldIndexValue", Value.fromBigInt(value as BigInt));
    }
  }

  get totalUnitsApproved(): BigInt | null {
    let value = this.get("totalUnitsApproved");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalUnitsApproved(value: BigInt | null) {
    if (value === null) {
      this.unset("totalUnitsApproved");
    } else {
      this.set("totalUnitsApproved", Value.fromBigInt(value as BigInt));
    }
  }

  get totalUnitsPending(): BigInt | null {
    let value = this.get("totalUnitsPending");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalUnitsPending(value: BigInt | null) {
    if (value === null) {
      this.unset("totalUnitsPending");
    } else {
      this.set("totalUnitsPending", Value.fromBigInt(value as BigInt));
    }
  }

  get distribution(): BigInt | null {
    let value = this.get("distribution");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set distribution(value: BigInt | null) {
    if (value === null) {
      this.unset("distribution");
    } else {
      this.set("distribution", Value.fromBigInt(value as BigInt));
    }
  }

  get userData(): Bytes | null {
    let value = this.get("userData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userData(value: Bytes | null) {
    if (value === null) {
      this.unset("userData");
    } else {
      this.set("userData", Value.fromBytes(value as Bytes));
    }
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class indexUnitUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save indexUnitUpdate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save indexUnitUpdate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("indexUnitUpdate", id.toString(), this);
  }

  static load(id: string): indexUnitUpdate | null {
    return store.get("indexUnitUpdate", id) as indexUnitUpdate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): string | null {
    let value = this.get("index");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set index(value: string | null) {
    if (value === null) {
      this.unset("index");
    } else {
      this.set("index", Value.fromString(value as string));
    }
  }

  get subscriber(): Bytes | null {
    let value = this.get("subscriber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subscriber(value: Bytes | null) {
    if (value === null) {
      this.unset("subscriber");
    } else {
      this.set("subscriber", Value.fromBytes(value as Bytes));
    }
  }

  get units(): BigInt | null {
    let value = this.get("units");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set units(value: BigInt | null) {
    if (value === null) {
      this.unset("units");
    } else {
      this.set("units", Value.fromBigInt(value as BigInt));
    }
  }

  get userData(): Bytes | null {
    let value = this.get("userData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userData(value: Bytes | null) {
    if (value === null) {
      this.unset("userData");
    } else {
      this.set("userData", Value.fromBytes(value as Bytes));
    }
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class indexSubscribed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save indexSubscribed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save indexSubscribed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("indexSubscribed", id.toString(), this);
  }

  static load(id: string): indexSubscribed | null {
    return store.get("indexSubscribed", id) as indexSubscribed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): string | null {
    let value = this.get("index");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set index(value: string | null) {
    if (value === null) {
      this.unset("index");
    } else {
      this.set("index", Value.fromString(value as string));
    }
  }

  get subscriber(): Bytes | null {
    let value = this.get("subscriber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subscriber(value: Bytes | null) {
    if (value === null) {
      this.unset("subscriber");
    } else {
      this.set("subscriber", Value.fromBytes(value as Bytes));
    }
  }

  get userData(): Bytes | null {
    let value = this.get("userData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userData(value: Bytes | null) {
    if (value === null) {
      this.unset("userData");
    } else {
      this.set("userData", Value.fromBytes(value as Bytes));
    }
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class indexUnsubscribed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save indexUnsubscribed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save indexUnsubscribed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("indexUnsubscribed", id.toString(), this);
  }

  static load(id: string): indexUnsubscribed | null {
    return store.get("indexUnsubscribed", id) as indexUnsubscribed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): string | null {
    let value = this.get("index");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set index(value: string | null) {
    if (value === null) {
      this.unset("index");
    } else {
      this.set("index", Value.fromString(value as string));
    }
  }

  get subscriber(): Bytes | null {
    let value = this.get("subscriber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subscriber(value: Bytes | null) {
    if (value === null) {
      this.unset("subscriber");
    } else {
      this.set("subscriber", Value.fromBytes(value as Bytes));
    }
  }

  get userData(): Bytes | null {
    let value = this.get("userData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userData(value: Bytes | null) {
    if (value === null) {
      this.unset("userData");
    } else {
      this.set("userData", Value.fromBytes(value as Bytes));
    }
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class subscriptionApproved extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save subscriptionApproved entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save subscriptionApproved entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("subscriptionApproved", id.toString(), this);
  }

  static load(id: string): subscriptionApproved | null {
    return store.get("subscriptionApproved", id) as subscriptionApproved | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subscriber(): string | null {
    let value = this.get("subscriber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subscriber(value: string | null) {
    if (value === null) {
      this.unset("subscriber");
    } else {
      this.set("subscriber", Value.fromString(value as string));
    }
  }

  get userData(): Bytes | null {
    let value = this.get("userData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userData(value: Bytes | null) {
    if (value === null) {
      this.unset("userData");
    } else {
      this.set("userData", Value.fromBytes(value as Bytes));
    }
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class subscriptionRevoked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save subscriptionRevoked entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save subscriptionRevoked entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("subscriptionRevoked", id.toString(), this);
  }

  static load(id: string): subscriptionRevoked | null {
    return store.get("subscriptionRevoked", id) as subscriptionRevoked | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subscriber(): string | null {
    let value = this.get("subscriber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subscriber(value: string | null) {
    if (value === null) {
      this.unset("subscriber");
    } else {
      this.set("subscriber", Value.fromString(value as string));
    }
  }

  get userData(): Bytes | null {
    let value = this.get("userData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userData(value: Bytes | null) {
    if (value === null) {
      this.unset("userData");
    } else {
      this.set("userData", Value.fromBytes(value as Bytes));
    }
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class subscriptionUnitsUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save subscriptionUnitsUpdated entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save subscriptionUnitsUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("subscriptionUnitsUpdated", id.toString(), this);
  }

  static load(id: string): subscriptionUnitsUpdated | null {
    return store.get(
      "subscriptionUnitsUpdated",
      id
    ) as subscriptionUnitsUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subscriber(): string | null {
    let value = this.get("subscriber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subscriber(value: string | null) {
    if (value === null) {
      this.unset("subscriber");
    } else {
      this.set("subscriber", Value.fromString(value as string));
    }
  }

  get userData(): Bytes | null {
    let value = this.get("userData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userData(value: Bytes | null) {
    if (value === null) {
      this.unset("userData");
    } else {
      this.set("userData", Value.fromBytes(value as Bytes));
    }
  }

  get units(): BigInt | null {
    let value = this.get("units");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set units(value: BigInt | null) {
    if (value === null) {
      this.unset("units");
    } else {
      this.set("units", Value.fromBigInt(value as BigInt));
    }
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}
