// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AgreementAccountStateUpdated extends ethereum.Event {
  get params(): AgreementAccountStateUpdated__Params {
    return new AgreementAccountStateUpdated__Params(this);
  }
}

export class AgreementAccountStateUpdated__Params {
  _event: AgreementAccountStateUpdated;

  constructor(event: AgreementAccountStateUpdated) {
    this._event = event;
  }

  get agreementClass(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get state(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class AgreementCreated extends ethereum.Event {
  get params(): AgreementCreated__Params {
    return new AgreementCreated__Params(this);
  }
}

export class AgreementCreated__Params {
  _event: AgreementCreated;

  constructor(event: AgreementCreated) {
    this._event = event;
  }

  get agreementClass(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get data(): Array<Bytes> {
    return this._event.parameters[2].value.toBytesArray();
  }
}

export class AgreementLiquidated extends ethereum.Event {
  get params(): AgreementLiquidated__Params {
    return new AgreementLiquidated__Params(this);
  }
}

export class AgreementLiquidated__Params {
  _event: AgreementLiquidated;

  constructor(event: AgreementLiquidated) {
    this._event = event;
  }

  get agreementClass(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get penaltyAccount(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get rewardAccount(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AgreementLiquidatedBy extends ethereum.Event {
  get params(): AgreementLiquidatedBy__Params {
    return new AgreementLiquidatedBy__Params(this);
  }
}

export class AgreementLiquidatedBy__Params {
  _event: AgreementLiquidatedBy;

  constructor(event: AgreementLiquidatedBy) {
    this._event = event;
  }

  get liquidatorAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get agreementClass(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get penaltyAccount(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get bondAccount(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get bailoutAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class AgreementStateUpdated extends ethereum.Event {
  get params(): AgreementStateUpdated__Params {
    return new AgreementStateUpdated__Params(this);
  }
}

export class AgreementStateUpdated__Params {
  _event: AgreementStateUpdated;

  constructor(event: AgreementStateUpdated) {
    this._event = event;
  }

  get agreementClass(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get slotId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AgreementTerminated extends ethereum.Event {
  get params(): AgreementTerminated__Params {
    return new AgreementTerminated__Params(this);
  }
}

export class AgreementTerminated__Params {
  _event: AgreementTerminated;

  constructor(event: AgreementTerminated) {
    this._event = event;
  }

  get agreementClass(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class AgreementUpdated extends ethereum.Event {
  get params(): AgreementUpdated__Params {
    return new AgreementUpdated__Params(this);
  }
}

export class AgreementUpdated__Params {
  _event: AgreementUpdated;

  constructor(event: AgreementUpdated) {
    this._event = event;
  }

  get agreementClass(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get data(): Array<Bytes> {
    return this._event.parameters[2].value.toBytesArray();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuthorizedOperator extends ethereum.Event {
  get params(): AuthorizedOperator__Params {
    return new AuthorizedOperator__Params(this);
  }
}

export class AuthorizedOperator__Params {
  _event: AuthorizedOperator;

  constructor(event: AuthorizedOperator) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenHolder(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Bailout extends ethereum.Event {
  get params(): Bailout__Params {
    return new Bailout__Params(this);
  }
}

export class Bailout__Params {
  _event: Bailout;

  constructor(event: Bailout) {
    this._event = event;
  }

  get bailoutAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bailoutAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class RevokedOperator extends ethereum.Event {
  get params(): RevokedOperator__Params {
    return new RevokedOperator__Params(this);
  }
}

export class RevokedOperator__Params {
  _event: RevokedOperator;

  constructor(event: RevokedOperator) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenHolder(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Sent extends ethereum.Event {
  get params(): Sent__Params {
    return new Sent__Params(this);
  }
}

export class Sent__Params {
  _event: Sent;

  constructor(event: Sent) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class TokenDowngraded extends ethereum.Event {
  get params(): TokenDowngraded__Params {
    return new TokenDowngraded__Params(this);
  }
}

export class TokenDowngraded__Params {
  _event: TokenDowngraded;

  constructor(event: TokenDowngraded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenUpgraded extends ethereum.Event {
  get params(): TokenUpgraded__Params {
    return new TokenUpgraded__Params(this);
  }
}

export class TokenUpgraded__Params {
  _event: TokenUpgraded;

  constructor(event: TokenUpgraded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ISuperToken__realtimeBalanceOfResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ISuperToken__realtimeBalanceOfNowResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class ISuperToken extends ethereum.SmartContract {
  static bind(address: Address): ISuperToken {
    return new ISuperToken("ISuperToken", address);
  }

  getAccountActiveAgreements(account: Address): Array<Address> {
    let result = super.call(
      "getAccountActiveAgreements",
      "getAccountActiveAgreements(address):(address[])",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toAddressArray();
  }

  try_getAccountActiveAgreements(
    account: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAccountActiveAgreements",
      "getAccountActiveAgreements(address):(address[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAgreementData(
    agreementClass: Address,
    id: Bytes,
    dataLength: BigInt
  ): Array<Bytes> {
    let result = super.call(
      "getAgreementData",
      "getAgreementData(address,bytes32,uint256):(bytes32[])",
      [
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(id),
        ethereum.Value.fromUnsignedBigInt(dataLength)
      ]
    );

    return result[0].toBytesArray();
  }

  try_getAgreementData(
    agreementClass: Address,
    id: Bytes,
    dataLength: BigInt
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAgreementData",
      "getAgreementData(address,bytes32,uint256):(bytes32[])",
      [
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromFixedBytes(id),
        ethereum.Value.fromUnsignedBigInt(dataLength)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAgreementStateSlot(
    agreementClass: Address,
    account: Address,
    slotId: BigInt,
    dataLength: BigInt
  ): Array<Bytes> {
    let result = super.call(
      "getAgreementStateSlot",
      "getAgreementStateSlot(address,address,uint256,uint256):(bytes32[])",
      [
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(slotId),
        ethereum.Value.fromUnsignedBigInt(dataLength)
      ]
    );

    return result[0].toBytesArray();
  }

  try_getAgreementStateSlot(
    agreementClass: Address,
    account: Address,
    slotId: BigInt,
    dataLength: BigInt
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAgreementStateSlot",
      "getAgreementStateSlot(address,address,uint256,uint256):(bytes32[])",
      [
        ethereum.Value.fromAddress(agreementClass),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(slotId),
        ethereum.Value.fromUnsignedBigInt(dataLength)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getHost(): Address {
    let result = super.call("getHost", "getHost():(address)", []);

    return result[0].toAddress();
  }

  try_getHost(): ethereum.CallResult<Address> {
    let result = super.tryCall("getHost", "getHost():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAccountCritical(account: Address, timestamp: BigInt): boolean {
    let result = super.call(
      "isAccountCritical",
      "isAccountCritical(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAccountCritical(
    account: Address,
    timestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAccountCritical",
      "isAccountCritical(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAccountCriticalNow(account: Address): boolean {
    let result = super.call(
      "isAccountCriticalNow",
      "isAccountCriticalNow(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_isAccountCriticalNow(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAccountCriticalNow",
      "isAccountCriticalNow(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAccountSolvent(account: Address, timestamp: BigInt): boolean {
    let result = super.call(
      "isAccountSolvent",
      "isAccountSolvent(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAccountSolvent(
    account: Address,
    timestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAccountSolvent",
      "isAccountSolvent(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAccountSolventNow(account: Address): boolean {
    let result = super.call(
      "isAccountSolventNow",
      "isAccountSolventNow(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_isAccountSolventNow(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAccountSolventNow",
      "isAccountSolventNow(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  realtimeBalanceOf(
    account: Address,
    timestamp: BigInt
  ): ISuperToken__realtimeBalanceOfResult {
    let result = super.call(
      "realtimeBalanceOf",
      "realtimeBalanceOf(address,uint256):(int256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return new ISuperToken__realtimeBalanceOfResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_realtimeBalanceOf(
    account: Address,
    timestamp: BigInt
  ): ethereum.CallResult<ISuperToken__realtimeBalanceOfResult> {
    let result = super.tryCall(
      "realtimeBalanceOf",
      "realtimeBalanceOf(address,uint256):(int256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ISuperToken__realtimeBalanceOfResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  realtimeBalanceOfNow(
    account: Address
  ): ISuperToken__realtimeBalanceOfNowResult {
    let result = super.call(
      "realtimeBalanceOfNow",
      "realtimeBalanceOfNow(address):(int256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new ISuperToken__realtimeBalanceOfNowResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_realtimeBalanceOfNow(
    account: Address
  ): ethereum.CallResult<ISuperToken__realtimeBalanceOfNowResult> {
    let result = super.tryCall(
      "realtimeBalanceOfNow",
      "realtimeBalanceOfNow(address):(int256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ISuperToken__realtimeBalanceOfNowResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  granularity(): BigInt {
    let result = super.call("granularity", "granularity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_granularity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("granularity", "granularity():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOperatorFor(operator: Address, tokenHolder: Address): boolean {
    let result = super.call(
      "isOperatorFor",
      "isOperatorFor(address,address):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(tokenHolder)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOperatorFor(
    operator: Address,
    tokenHolder: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperatorFor",
      "isOperatorFor(address,address):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(tokenHolder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  defaultOperators(): Array<Address> {
    let result = super.call(
      "defaultOperators",
      "defaultOperators():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_defaultOperators(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "defaultOperators",
      "defaultOperators():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getUnderlyingToken(): Address {
    let result = super.call(
      "getUnderlyingToken",
      "getUnderlyingToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getUnderlyingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUnderlyingToken",
      "getUnderlyingToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateAgreementCall extends ethereum.Call {
  get inputs(): CreateAgreementCall__Inputs {
    return new CreateAgreementCall__Inputs(this);
  }

  get outputs(): CreateAgreementCall__Outputs {
    return new CreateAgreementCall__Outputs(this);
  }
}

export class CreateAgreementCall__Inputs {
  _call: CreateAgreementCall;

  constructor(call: CreateAgreementCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class CreateAgreementCall__Outputs {
  _call: CreateAgreementCall;

  constructor(call: CreateAgreementCall) {
    this._call = call;
  }
}

export class MakeLiquidationPayoutsCall extends ethereum.Call {
  get inputs(): MakeLiquidationPayoutsCall__Inputs {
    return new MakeLiquidationPayoutsCall__Inputs(this);
  }

  get outputs(): MakeLiquidationPayoutsCall__Outputs {
    return new MakeLiquidationPayoutsCall__Outputs(this);
  }
}

export class MakeLiquidationPayoutsCall__Inputs {
  _call: MakeLiquidationPayoutsCall;

  constructor(call: MakeLiquidationPayoutsCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get liquidator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get penaltyAccount(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get bailoutAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class MakeLiquidationPayoutsCall__Outputs {
  _call: MakeLiquidationPayoutsCall;

  constructor(call: MakeLiquidationPayoutsCall) {
    this._call = call;
  }
}

export class SettleBalanceCall extends ethereum.Call {
  get inputs(): SettleBalanceCall__Inputs {
    return new SettleBalanceCall__Inputs(this);
  }

  get outputs(): SettleBalanceCall__Outputs {
    return new SettleBalanceCall__Outputs(this);
  }
}

export class SettleBalanceCall__Inputs {
  _call: SettleBalanceCall;

  constructor(call: SettleBalanceCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleBalanceCall__Outputs {
  _call: SettleBalanceCall;

  constructor(call: SettleBalanceCall) {
    this._call = call;
  }
}

export class TerminateAgreementCall extends ethereum.Call {
  get inputs(): TerminateAgreementCall__Inputs {
    return new TerminateAgreementCall__Inputs(this);
  }

  get outputs(): TerminateAgreementCall__Outputs {
    return new TerminateAgreementCall__Outputs(this);
  }
}

export class TerminateAgreementCall__Inputs {
  _call: TerminateAgreementCall;

  constructor(call: TerminateAgreementCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get dataLength(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TerminateAgreementCall__Outputs {
  _call: TerminateAgreementCall;

  constructor(call: TerminateAgreementCall) {
    this._call = call;
  }
}

export class UpdateAgreementDataCall extends ethereum.Call {
  get inputs(): UpdateAgreementDataCall__Inputs {
    return new UpdateAgreementDataCall__Inputs(this);
  }

  get outputs(): UpdateAgreementDataCall__Outputs {
    return new UpdateAgreementDataCall__Outputs(this);
  }
}

export class UpdateAgreementDataCall__Inputs {
  _call: UpdateAgreementDataCall;

  constructor(call: UpdateAgreementDataCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class UpdateAgreementDataCall__Outputs {
  _call: UpdateAgreementDataCall;

  constructor(call: UpdateAgreementDataCall) {
    this._call = call;
  }
}

export class UpdateAgreementStateSlotCall extends ethereum.Call {
  get inputs(): UpdateAgreementStateSlotCall__Inputs {
    return new UpdateAgreementStateSlotCall__Inputs(this);
  }

  get outputs(): UpdateAgreementStateSlotCall__Outputs {
    return new UpdateAgreementStateSlotCall__Outputs(this);
  }
}

export class UpdateAgreementStateSlotCall__Inputs {
  _call: UpdateAgreementStateSlotCall;

  constructor(call: UpdateAgreementStateSlotCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get slotId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get slotData(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class UpdateAgreementStateSlotCall__Outputs {
  _call: UpdateAgreementStateSlotCall;

  constructor(call: UpdateAgreementStateSlotCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get underlyingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingDecimals(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get n(): string {
    return this._call.inputValues[2].value.toString();
  }

  get s(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SendCall extends ethereum.Call {
  get inputs(): SendCall__Inputs {
    return new SendCall__Inputs(this);
  }

  get outputs(): SendCall__Outputs {
    return new SendCall__Outputs(this);
  }
}

export class SendCall__Inputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SendCall__Outputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class AuthorizeOperatorCall extends ethereum.Call {
  get inputs(): AuthorizeOperatorCall__Inputs {
    return new AuthorizeOperatorCall__Inputs(this);
  }

  get outputs(): AuthorizeOperatorCall__Outputs {
    return new AuthorizeOperatorCall__Outputs(this);
  }
}

export class AuthorizeOperatorCall__Inputs {
  _call: AuthorizeOperatorCall;

  constructor(call: AuthorizeOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeOperatorCall__Outputs {
  _call: AuthorizeOperatorCall;

  constructor(call: AuthorizeOperatorCall) {
    this._call = call;
  }
}

export class RevokeOperatorCall extends ethereum.Call {
  get inputs(): RevokeOperatorCall__Inputs {
    return new RevokeOperatorCall__Inputs(this);
  }

  get outputs(): RevokeOperatorCall__Outputs {
    return new RevokeOperatorCall__Outputs(this);
  }
}

export class RevokeOperatorCall__Inputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeOperatorCall__Outputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }
}

export class OperatorSendCall extends ethereum.Call {
  get inputs(): OperatorSendCall__Inputs {
    return new OperatorSendCall__Inputs(this);
  }

  get outputs(): OperatorSendCall__Outputs {
    return new OperatorSendCall__Outputs(this);
  }
}

export class OperatorSendCall__Inputs {
  _call: OperatorSendCall;

  constructor(call: OperatorSendCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OperatorSendCall__Outputs {
  _call: OperatorSendCall;

  constructor(call: OperatorSendCall) {
    this._call = call;
  }
}

export class OperatorBurnCall extends ethereum.Call {
  get inputs(): OperatorBurnCall__Inputs {
    return new OperatorBurnCall__Inputs(this);
  }

  get outputs(): OperatorBurnCall__Outputs {
    return new OperatorBurnCall__Outputs(this);
  }
}

export class OperatorBurnCall__Inputs {
  _call: OperatorBurnCall;

  constructor(call: OperatorBurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OperatorBurnCall__Outputs {
  _call: OperatorBurnCall;

  constructor(call: OperatorBurnCall) {
    this._call = call;
  }
}

export class SelfMintCall extends ethereum.Call {
  get inputs(): SelfMintCall__Inputs {
    return new SelfMintCall__Inputs(this);
  }

  get outputs(): SelfMintCall__Outputs {
    return new SelfMintCall__Outputs(this);
  }
}

export class SelfMintCall__Inputs {
  _call: SelfMintCall;

  constructor(call: SelfMintCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SelfMintCall__Outputs {
  _call: SelfMintCall;

  constructor(call: SelfMintCall) {
    this._call = call;
  }
}

export class SelfBurnCall extends ethereum.Call {
  get inputs(): SelfBurnCall__Inputs {
    return new SelfBurnCall__Inputs(this);
  }

  get outputs(): SelfBurnCall__Outputs {
    return new SelfBurnCall__Outputs(this);
  }
}

export class SelfBurnCall__Inputs {
  _call: SelfBurnCall;

  constructor(call: SelfBurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SelfBurnCall__Outputs {
  _call: SelfBurnCall;

  constructor(call: SelfBurnCall) {
    this._call = call;
  }
}

export class TransferAllCall extends ethereum.Call {
  get inputs(): TransferAllCall__Inputs {
    return new TransferAllCall__Inputs(this);
  }

  get outputs(): TransferAllCall__Outputs {
    return new TransferAllCall__Outputs(this);
  }
}

export class TransferAllCall__Inputs {
  _call: TransferAllCall;

  constructor(call: TransferAllCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAllCall__Outputs {
  _call: TransferAllCall;

  constructor(call: TransferAllCall) {
    this._call = call;
  }
}

export class UpgradeCall extends ethereum.Call {
  get inputs(): UpgradeCall__Inputs {
    return new UpgradeCall__Inputs(this);
  }

  get outputs(): UpgradeCall__Outputs {
    return new UpgradeCall__Outputs(this);
  }
}

export class UpgradeCall__Inputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpgradeCall__Outputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class DowngradeCall extends ethereum.Call {
  get inputs(): DowngradeCall__Inputs {
    return new DowngradeCall__Inputs(this);
  }

  get outputs(): DowngradeCall__Outputs {
    return new DowngradeCall__Outputs(this);
  }
}

export class DowngradeCall__Inputs {
  _call: DowngradeCall;

  constructor(call: DowngradeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DowngradeCall__Outputs {
  _call: DowngradeCall;

  constructor(call: DowngradeCall) {
    this._call = call;
  }
}

export class OperationApproveCall extends ethereum.Call {
  get inputs(): OperationApproveCall__Inputs {
    return new OperationApproveCall__Inputs(this);
  }

  get outputs(): OperationApproveCall__Outputs {
    return new OperationApproveCall__Outputs(this);
  }
}

export class OperationApproveCall__Inputs {
  _call: OperationApproveCall;

  constructor(call: OperationApproveCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OperationApproveCall__Outputs {
  _call: OperationApproveCall;

  constructor(call: OperationApproveCall) {
    this._call = call;
  }
}

export class OperationTransferFromCall extends ethereum.Call {
  get inputs(): OperationTransferFromCall__Inputs {
    return new OperationTransferFromCall__Inputs(this);
  }

  get outputs(): OperationTransferFromCall__Outputs {
    return new OperationTransferFromCall__Outputs(this);
  }
}

export class OperationTransferFromCall__Inputs {
  _call: OperationTransferFromCall;

  constructor(call: OperationTransferFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OperationTransferFromCall__Outputs {
  _call: OperationTransferFromCall;

  constructor(call: OperationTransferFromCall) {
    this._call = call;
  }
}

export class OperationUpgradeCall extends ethereum.Call {
  get inputs(): OperationUpgradeCall__Inputs {
    return new OperationUpgradeCall__Inputs(this);
  }

  get outputs(): OperationUpgradeCall__Outputs {
    return new OperationUpgradeCall__Outputs(this);
  }
}

export class OperationUpgradeCall__Inputs {
  _call: OperationUpgradeCall;

  constructor(call: OperationUpgradeCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OperationUpgradeCall__Outputs {
  _call: OperationUpgradeCall;

  constructor(call: OperationUpgradeCall) {
    this._call = call;
  }
}

export class OperationDowngradeCall extends ethereum.Call {
  get inputs(): OperationDowngradeCall__Inputs {
    return new OperationDowngradeCall__Inputs(this);
  }

  get outputs(): OperationDowngradeCall__Outputs {
    return new OperationDowngradeCall__Outputs(this);
  }
}

export class OperationDowngradeCall__Inputs {
  _call: OperationDowngradeCall;

  constructor(call: OperationDowngradeCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OperationDowngradeCall__Outputs {
  _call: OperationDowngradeCall;

  constructor(call: OperationDowngradeCall) {
    this._call = call;
  }
}
