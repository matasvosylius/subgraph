// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CustomSuperTokenCreated extends ethereum.Event {
  get params(): CustomSuperTokenCreated__Params {
    return new CustomSuperTokenCreated__Params(this);
  }
}

export class CustomSuperTokenCreated__Params {
  _event: CustomSuperTokenCreated;

  constructor(event: CustomSuperTokenCreated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SuperTokenCreated extends ethereum.Event {
  get params(): SuperTokenCreated__Params {
    return new SuperTokenCreated__Params(this);
  }
}

export class SuperTokenCreated__Params {
  _event: SuperTokenCreated;

  constructor(event: SuperTokenCreated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SuperTokenLogicCreated extends ethereum.Event {
  get params(): SuperTokenLogicCreated__Params {
    return new SuperTokenLogicCreated__Params(this);
  }
}

export class SuperTokenLogicCreated__Params {
  _event: SuperTokenLogicCreated;

  constructor(event: SuperTokenLogicCreated) {
    this._event = event;
  }

  get tokenLogic(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ISuperTokenFactory extends ethereum.SmartContract {
  static bind(address: Address): ISuperTokenFactory {
    return new ISuperTokenFactory("ISuperTokenFactory", address);
  }

  getHost(): Address {
    let result = super.call("getHost", "getHost():(address)", []);

    return result[0].toAddress();
  }

  try_getHost(): ethereum.CallResult<Address> {
    let result = super.tryCall("getHost", "getHost():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSuperTokenLogic(): Address {
    let result = super.call(
      "getSuperTokenLogic",
      "getSuperTokenLogic():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSuperTokenLogic(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSuperTokenLogic",
      "getSuperTokenLogic():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createERC20Wrapper(
    underlyingToken: Address,
    upgradability: i32,
    name: string,
    symbol: string
  ): Address {
    let result = super.call(
      "createERC20Wrapper",
      "createERC20Wrapper(address,uint8,string,string):(address)",
      [
        ethereum.Value.fromAddress(underlyingToken),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(upgradability)),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol)
      ]
    );

    return result[0].toAddress();
  }

  try_createERC20Wrapper(
    underlyingToken: Address,
    upgradability: i32,
    name: string,
    symbol: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createERC20Wrapper",
      "createERC20Wrapper(address,uint8,string,string):(address)",
      [
        ethereum.Value.fromAddress(underlyingToken),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(upgradability)),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createERC20Wrapper1(
    underlyingToken: Address,
    underlyingDecimals: i32,
    upgradability: i32,
    name: string,
    symbol: string
  ): Address {
    let result = super.call(
      "createERC20Wrapper",
      "createERC20Wrapper(address,uint8,uint8,string,string):(address)",
      [
        ethereum.Value.fromAddress(underlyingToken),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(underlyingDecimals)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(upgradability)),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol)
      ]
    );

    return result[0].toAddress();
  }

  try_createERC20Wrapper1(
    underlyingToken: Address,
    underlyingDecimals: i32,
    upgradability: i32,
    name: string,
    symbol: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createERC20Wrapper",
      "createERC20Wrapper(address,uint8,uint8,string,string):(address)",
      [
        ethereum.Value.fromAddress(underlyingToken),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(underlyingDecimals)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(upgradability)),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class CreateERC20WrapperCall extends ethereum.Call {
  get inputs(): CreateERC20WrapperCall__Inputs {
    return new CreateERC20WrapperCall__Inputs(this);
  }

  get outputs(): CreateERC20WrapperCall__Outputs {
    return new CreateERC20WrapperCall__Outputs(this);
  }
}

export class CreateERC20WrapperCall__Inputs {
  _call: CreateERC20WrapperCall;

  constructor(call: CreateERC20WrapperCall) {
    this._call = call;
  }

  get underlyingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get upgradability(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateERC20WrapperCall__Outputs {
  _call: CreateERC20WrapperCall;

  constructor(call: CreateERC20WrapperCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateERC20Wrapper1Call extends ethereum.Call {
  get inputs(): CreateERC20Wrapper1Call__Inputs {
    return new CreateERC20Wrapper1Call__Inputs(this);
  }

  get outputs(): CreateERC20Wrapper1Call__Outputs {
    return new CreateERC20Wrapper1Call__Outputs(this);
  }
}

export class CreateERC20Wrapper1Call__Inputs {
  _call: CreateERC20Wrapper1Call;

  constructor(call: CreateERC20Wrapper1Call) {
    this._call = call;
  }

  get underlyingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingDecimals(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get upgradability(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateERC20Wrapper1Call__Outputs {
  _call: CreateERC20Wrapper1Call;

  constructor(call: CreateERC20Wrapper1Call) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCustomSuperTokenCall extends ethereum.Call {
  get inputs(): InitializeCustomSuperTokenCall__Inputs {
    return new InitializeCustomSuperTokenCall__Inputs(this);
  }

  get outputs(): InitializeCustomSuperTokenCall__Outputs {
    return new InitializeCustomSuperTokenCall__Outputs(this);
  }
}

export class InitializeCustomSuperTokenCall__Inputs {
  _call: InitializeCustomSuperTokenCall;

  constructor(call: InitializeCustomSuperTokenCall) {
    this._call = call;
  }

  get customSuperTokenProxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCustomSuperTokenCall__Outputs {
  _call: InitializeCustomSuperTokenCall;

  constructor(call: InitializeCustomSuperTokenCall) {
    this._call = call;
  }
}
